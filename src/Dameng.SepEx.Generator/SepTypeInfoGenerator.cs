using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Dameng.SepEx.Generator;

[Generator]
public class SepTypeInfoGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var spanParsableInterface = context.Compilation.GetTypeByMetadataName(
            "System.ISpanParsable`1"
        );
        if (spanParsableInterface is null)
        {
            context.ReportDiagnostic(
                Diagnostic.Create(
                    new DiagnosticDescriptor(
                        "SP001",
                        "Missing ISpanParsable",
                        "The ISpanParsable interface is not available. Ensure you are targeting .NET 6 or later.",
                        "Usage",
                        DiagnosticSeverity.Error,
                        true
                    ),
                    Location.None
                )
            );

            return;
        }

        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        {
            var semanticModel = context.Compilation.GetSemanticModel(syntaxTree);
            foreach (var typeDeclaration in syntaxTree.GetRoot().DescendantNodesAndSelf())
            {
                if (typeDeclaration is not ClassDeclarationSyntax and not StructDeclarationSyntax)
                    continue;
                var classSymbol =
                    semanticModel.GetDeclaredSymbol(typeDeclaration) as INamedTypeSymbol;

                if (classSymbol is null)
                {
                    continue;
                }

                var attributes = classSymbol.GetAttributes();

                // Handle GenSepTypeInfo attributes (existing logic)
                var typeInfoAttributes = attributes
                    .Where(attribute =>
                        attribute
                            .AttributeClass!.ToDisplayString()
                            .StartsWith("Dameng.SepEx.GenSepTypeInfoAttribute<")
                    )
                    .ToArray();

                // Skip if no relevant attributes found
                if (typeInfoAttributes.Length > 0)
                {
                    try
                    {
                        StringBuilder genClassCodeBuilder = new StringBuilder();
                        genClassCodeBuilder.AppendLine(
                            $$"""
                              // <auto-generated at {{DateTimeOffset.Now:O}}/>
                              using System;
                              using Dameng.SepEx;

                              namespace {{classSymbol.ContainingNamespace.ToDisplayString()}};

                              """
                        );

                        List<INamedTypeSymbol> targetTypeNames = new();
                        foreach (var attribute in typeInfoAttributes)
                        {
                            var targetType = attribute.AttributeClass!.TypeArguments[0] as INamedTypeSymbol;
                            if (targetType is null)
                            {
                                continue;
                            }

                            targetTypeNames.Add(targetType);

                            var (readCode, writeCode) =Utils.GeneratePropertyCode(targetType, context);

                            genClassCodeBuilder.AppendLine(
                                $$"""
                                  file sealed class {{targetType.Name}}SepTypeInfo : ISepTypeInfo<{{targetType.ToDisplayString()}}>
                                  {
                                      public {{targetType.ToDisplayString()}} Read(nietras.SeparatedValues.SepReader reader,nietras.SeparatedValues.SepReader.Row readRow) 
                                      {
                                  {{readCode}}
                                      }

                                      public void Write(nietras.SeparatedValues.SepWriter writer,nietras.SeparatedValues.SepWriter.Row writeRow, {{targetType.ToDisplayString()}} value)
                                      {
                                  {{writeCode}}
                                      }
                                  }
                                  """
                            );
                        }

                        StringBuilder staticTypeInfoPropertyCodeBuilder = new();

                        foreach (var targetTypeName in targetTypeNames)
                        {
                            staticTypeInfoPropertyCodeBuilder.AppendLine(
                                $$"""
                                      public static ISepTypeInfo<{{targetTypeName.ToDisplayString()}}> {{targetTypeName.Name}} { get; } = new {{targetTypeName.Name}}SepTypeInfo();
                                  """
                            );
                        }

                        genClassCodeBuilder.Append(
                            $$"""
                              partial class {{classSymbol.Name}}
                              {
                              {{staticTypeInfoPropertyCodeBuilder.ToString().TrimEnd()}}
                              }
                              """
                        );

                        context.AddSource(
                            classSymbol.Name + ".g.cs",
                            SourceText.From(genClassCodeBuilder.ToString(), Encoding.UTF8)
                        );
                    }
                    catch (Exception e)
                    {
                        context.ReportDiagnostic(
                            Diagnostic.Create(
                                new DiagnosticDescriptor(
                                    "SP003",
                                    "Code Generation Error",
                                    $"An error occurred while generating code for '{classSymbol.Name}': {e}",
                                    "Usage",
                                    DiagnosticSeverity.Error,
                                    true
                                ),
                                Location.None
                            )
                        );
                    }
                }
            }
        }
    }
}